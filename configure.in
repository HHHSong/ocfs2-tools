AC_PREREQ(2.54)

AC_INIT(libocfs2/bitmap.c)

PACKAGE=ocfs2-tools

AC_SUBST(PACKAGE)

# Adjust these for the software version.
MAJOR_VERSION=1
MINOR_VERSION=2
MICRO_VERSION=7
EXTRA_VERSION=

DIST_VERSION=$MAJOR_VERSION.$MINOR_VERSION.$MICRO_VERSION
if test -z "$EXTRA_VERSION"; then
    VERSION=$DIST_VERSION
else
    VERSION=$DIST_VERSION-$EXTRA_VERSION
fi

AC_SUBST(MAJOR_VERSION)
AC_SUBST(MINOR_VERSION)
AC_SUBST(MICRO_VERSION)
AC_SUBST(EXTRA_VERSION)

AC_SUBST(DIST_VERSION)
AC_SUBST(VERSION)

AC_CANONICAL_HOST

case "$host" in
  *-*-linux*)
    ;;
  *)
    AC_MSG_ERROR([This filesystem will only work on Linux])
    ;;
esac

AC_PROG_CC
AC_PROG_CPP

AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_RANLIB

AC_PATH_PROG(AR, ar)

AC_HEADER_STDC
AC_C_CONST

MB_VENDOR(VENDOR)

if test "x$GCC" != "xyes"; then
  AC_MSG_ERROR(GCC is required)
fi

AC_ARG_WITH([root-prefix], [  --with-root-prefix=PREFIX override prefix variable for files to be placed in the root], root_prefix=$withval, root_prefix="")

root_bindir='${root_prefix}/bin'
root_sbindir='${root_prefix}/sbin'
root_sysconfdir='${root_prefix}/etc'

AC_SUBST(root_prefix)
AC_SUBST(root_bindir)
AC_SUBST(root_sbindir)
AC_SUBST(root_sysconfdir)

AC_MSG_CHECKING(for debugging)
AC_ARG_ENABLE(debug, [  --enable-debug=[yes/no]         Turn on debugging [default=no]],,enable_debug=no)
OCFS2_DEBUG=
if test "x$enable_debug" = "xyes"; then
  OCFS2_DEBUG=yes
fi
AC_SUBST(OCFS2_DEBUG)
AC_MSG_RESULT($enable_debug)

COM_ERR_LIBS=
PKG_CHECK_MODULES(COM_ERR, com_err,, [
  AC_CHECK_LIB(com_err, com_err, COM_ERR_LIBS=-lcom_err)
  if test "x$COM_ERR_LIBS" = "x"; then
    AC_MSG_ERROR([Unable to find com_err library])
  fi
  AC_CHECK_HEADER(et/com_err.h, :,
    AC_MSG_ERROR([Unable to find com_err headers]))
  AC_SUBST(COM_ERR_LIBS)
])

UUID_LIBS=
AC_CHECK_LIB(uuid, uuid_unparse, UUID_LIBS=-luuid)
if test "x$UUID_LIBS" = "x"; then
  AC_MSG_ERROR([Unable to find uuid library])
fi
AC_CHECK_HEADER(uuid/uuid.h, :,
  AC_MSG_ERROR([Unable to find uuid headers]))
AC_SUBST(UUID_LIBS)

NCURSES_LIBS=
AC_CHECK_LIB(ncurses, tgetstr, NCURSES_LIBS=-lncurses)
if test "x$NCURSES_LIBS" = "x"; then
  AC_MSG_ERROR([Unable to find ncurses library])
fi
AC_SUBST(NCURSES_LIBS)

saved_LDFLAGS="$LDFLAGS"
LDFLAGS="$LDFLAGS -lncurses"
READLINE_LIBS=
AC_CHECK_LIB(readline, readline, READLINE_LIBS=-lreadline)
if test "x$READLINE_LIBS" = "x"; then
  AC_MSG_ERROR([Unable to find readline library])
fi
AC_CHECK_HEADER(readline/readline.h, :,
  AC_MSG_ERROR([Unable to find readline headers]))
AC_SUBST(READLINE_LIBS)
LDFLAGS="$saved_LDFLAGS"

AC_MSG_CHECKING(for debug executables)
AC_ARG_ENABLE(debugexe, [  --enable-debugexe=[yes/no]     Enable debug executables for library source files [default=no]],,enable_debugexe=no)
OCFS2_DEBUG_EXE=
if test "x$enable_debugexe" = "xyes"; then
    OCFS2_DEBUG_EXE=yes
fi
AC_SUBST(OCFS2_DEBUG_EXE)
AC_MSG_RESULT($enable_debugexe)

GLIB_REQUIRED_VERSION=2.2.3

AM_PATH_GLIB_2_0($GLIB_REQUIRED_VERSION, have_glib=yes,
 AC_MSG_ERROR([GLib $GLIB_REQUIRED_VERSION or better is required]))

AC_MSG_CHECKING(whether to build fsck dynamically)
AC_ARG_ENABLE([dynamic-fsck], [  --enable-dynamic-fsck=[yes/no]    Build fsck dynamically [default=no]],,enable_dynamic_fsck=no)
OCFS2_DYNAMIC_FSCK=
if test "x$enable_dynamic_fsck" = "xyes"; then
    OCFS2_DYNAMIC_FSCK=yes
fi
AC_SUBST(OCFS2_DYNAMIC_FSCK)
AC_MSG_RESULT($enable_dynamic_fsck)

OCFS2_DYNAMIC_CTL=
AC_MSG_CHECKING(whether to build cluster control tools dynamically)
AC_ARG_ENABLE([dynamic-ctl], [  --enable-dynamic-ctl=[yes/no]    Build cluster control tools dynamically [default=test]], [
AC_MSG_RESULT($enable_dynamic_ctl)
], [
enable_dynamic_ctl=test
AC_MSG_RESULT(test)])

if test "x$enable_dynamic_ctl" = "xtest"; then
  dyn_save_CFLAGS="$CFLAGS"
  dyn_save_LIBS="$LIBS"
  CFLAGS="$CFLAGS $GLIB_CFLAGS"
  LIBS="-static $LIBS $GLIB_LIBS"

  AC_MSG_CHECKING(how to link o2cb_ctl)
  AC_TRY_LINK([
#include <glib.h>
#include <stdio.h>
], [ return ((glib_major_version) || (glib_minor_version) || (glib_micro_version)); ], [
enable_dynamic_ctl=no
AC_MSG_RESULT(static)
], [
enable_dynamic_ctl=yes
AC_MSG_RESULT(dynamic)])

  CFLAGS="$dyn_save_CFLAGS"
  LIBS="$dyn_save_LIBS"
fi

if test "x$enable_dynamic_ctl" = "xyes"; then
    OCFS2_DYNAMIC_CTL=yes
fi
AC_SUBST(OCFS2_DYNAMIC_CTL)

BUILD_DEBUGOCFS2=

ocfs_tools_save_LIBS=$LIBS
LIBS="$LIBS -lncurses"
AC_CHECK_LIB(readline, readline,
  [AC_CHECK_HEADER(readline/readline.h,
    BUILD_DEBUGOCFS2=yes,
    [AC_MSG_WARN([readline not found, debugfs.ocfs2 will not be built])])],
  [AC_MSG_WARN([readline not found, debugfs.ocfs2 will not be built])])
LIBS=$ocfs_tools_save_LIBS

AC_SUBST(BUILD_DEBUGOCFS2)

BUILD_OCFS2CONSOLE=
AC_ARG_ENABLE(ocfs2console, [  --enable-ocfs2console=[yes/no]    Build GUI frontend [default=yes]],,enable_ocfs2console=yes)

if test "x$enable_ocfs2console" = "xyes"; then
  dnl check for Python
  AM_PATH_PYTHON(2.3, have_python=yes, have_python=no)

  if test "x$have_python" = "xyes"; then
    AM_CHECK_PYTHON_HEADERS(have_pythondev=yes, have_pythondev=no)

    if test "x$have_pythondev" = "xyes"; then
      if $PYTHON -c 'import gobject' >/dev/null 2>&1; then
        BUILD_OCFS2CONSOLE=yes
        OCFS2_BLKID
      else
        AC_MSG_WARN([could not find PyGTK, ocfs2console will not be built])
      fi 
    else
      AC_MSG_WARN([could not find Python headers, ocfs2console will not be built])
    fi
  else
    AC_MSG_WARN([could not find Python 2.3 or higher, ocfs2console will not be built])
  fi
fi

AC_SUBST(BUILD_OCFS2CONSOLE)

AC_CONFIG_FILES([
Config.make
o2cb.pc
o2dlm.pc
ocfs2.pc
ocfs2console/ocfs2interface/confdefs.py
debugfs.ocfs2/debugfs.ocfs2.8
mkfs.ocfs2/mkfs.ocfs2.8
mounted.ocfs2/mounted.ocfs2.8
fsck.ocfs2/fsck.ocfs2.8
fsck.ocfs2/fsck.ocfs2.checks.8
mount.ocfs2/mount.ocfs2.8
o2cb_ctl/o2cb_ctl.8
ocfs2_hb_ctl/ocfs2_hb_ctl.8
ocfs2cdsl/ocfs2cdsl.8
ocfs2console/ocfs2console.8
tunefs.ocfs2/tunefs.ocfs2.8
vendor/common/ocfs2-tools.spec-generic
])

AC_OUTPUT
